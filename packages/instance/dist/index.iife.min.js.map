{"version":3,"file":"index.iife.min.js","sources":["../index.js"],"sourcesContent":["export const withInstances = (internal, { Workflow, Tinyflow, TinyflowError }) => {\n  internal.instances = new Map()\n  const { instances, listeners } = internal\n\n  /**\n   * Gets a workflow instance by its id\n   * @method\n   * @param id {string}\n   * @returns {Workflow}\n   */\n  Tinyflow.get = id => instances.get(id)\n\n  /**\n   * Returns all non-disposed workflows of any state.\n   * @method\n   * @return {Workflow[]}\n   */\n  Tinyflow.all = () => [...instances.values()]\n\n  /**\n   * Clears all instances. By default, all engines are shut down\n   * and fire the end event.\n   * @method\n   */\n  Tinyflow.clear = () => {\n    const ids = [...instances.keys()]\n    for (const instanceId of ids) {\n      const workflow = Tinyflow.get(instanceId)\n      workflow.cancel()\n      Tinyflow.dispose(instanceId)\n    }\n  }\n\n  /**\n   * Creates a new workflow instance by given workflow definitions.\n   *\n   * @param definition {object} the workflow definitions object\n   * @returns {Workflow}\n   */\n  Tinyflow.create = (definition) => {\n    const workflow = new Workflow(definition)\n    instances.set(workflow.id, workflow)\n    return workflow\n  }\n\n  /**\n   * Fully disposes a workflow, including any event listener\n   * to it, or its current step.\n   * Once complete it will finally remove the workflow from\n   * the internal instances list.\n   * @param instanceId {string}\n   * @param force {boolean=}\n   */\n  Tinyflow.dispose = (instanceId, { force = false } = {}) => {\n    const workflow = instances.get(instanceId)\n    if (!workflow) {\n      throw new TinyflowError(`Workflow does not exist by id ${instanceId}`)\n    }\n    if (!force && workflow.state === 'active') {\n      throw new TinyflowError(`Cannot dispose active workflow \"${workflow.name}\"`, { instanceId })\n    }\n    if (workflow.current) {\n      workflow.current.off()\n      workflow.current = null\n    }\n    workflow.off()\n    listeners.delete(workflow)\n    instances.delete(instanceId)\n  }\n\n  // dispose method for complete cleanup of this extension\n  return () => {\n    delete internal.instances\n    delete Tinyflow.get\n    delete Tinyflow.all\n    delete Tinyflow.clear\n    delete Tinyflow.create\n    delete Tinyflow.dispose\n  }\n}\n"],"names":["exports","withInstances","internal","_ref","Workflow","Tinyflow","TinyflowError","instances","Map","listeners","get","id","all","_toConsumableArray","values","clear","_step","_iterator","_createForOfIteratorHelper","keys","s","n","done","instanceId","value","cancel","dispose","err","e","f","create","definition","workflow","set","_ref2$force","arguments","length","undefined","force","concat","state","name","current","off"],"mappings":"sxBA+EA,OAAAA,EAAAC,cA/E6B,SAACC,EAAQC,GAA4C,IAAxCC,EAAQD,EAARC,SAAUC,EAAQF,EAARE,SAAUC,EAAaH,EAAbG,cAC5DJ,EAASK,UAAY,IAAIC,IACzB,IAAQD,EAAyBL,EAAzBK,UAAWE,EAAcP,EAAdO,UAqEnB,OA7DAJ,EAASK,IAAM,SAAAC,GAAE,OAAIJ,EAAUG,IAAIC,EAAG,EAOtCN,EAASO,IAAM,WAAA,OAAAC,EAAUN,EAAUO,WAOnCT,EAASU,MAAQ,WACf,IAC4BC,EADKC,koBAAAC,CAAxBL,EAAON,EAAUY,SACE,IAA5B,IAAAF,EAAAG,MAAAJ,EAAAC,EAAAI,KAAAC,MAA8B,CAAA,IAAnBC,EAAUP,EAAAQ,MACFnB,EAASK,IAAIa,GACrBE,SACTpB,EAASqB,QAAQH,EACnB,CAAC,CAAA,MAAAI,GAAAV,EAAAW,EAAAD,EAAA,CAAA,QAAAV,EAAAY,GAAA,GASHxB,EAASyB,OAAS,SAACC,GACjB,IAAMC,EAAW,IAAI5B,EAAS2B,GAE9B,OADAxB,EAAU0B,IAAID,EAASrB,GAAIqB,GACpBA,GAWT3B,EAASqB,QAAU,SAACH,GAAuC,IAALW,GAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,CAAE,GAApBG,MAAAA,OAAQ,IAAHJ,GAAQA,EACvCF,EAAWzB,EAAUG,IAAIa,GAC/B,IAAKS,EACH,MAAM,IAAI1B,EAAa,iCAAAiC,OAAkChB,IAE3D,IAAKe,GAA4B,WAAnBN,EAASQ,MACrB,MAAM,IAAIlC,EAAaiC,mCAAAA,OAAoCP,EAASS,KAAS,KAAA,CAAElB,WAAAA,IAE7ES,EAASU,UACXV,EAASU,QAAQC,MACjBX,EAASU,QAAU,MAErBV,EAASW,MACTlC,EAAS,OAAQuB,GACjBzB,EAAS,OAAQgB,IAIZ,kBACErB,EAASK,iBACTF,EAASK,WACTL,EAASO,WACTP,EAASU,aACTV,EAASyB,cACTzB,EAASqB,QAEpB,EAAA1B,CAAA,EAAA,CAAA"}