{"version":3,"file":"withInstances.cjs.min.js","sources":["../withInstances.js"],"sourcesContent":["/**\n * @namespace Tinyflow\n */\n\n/**\n * Tinyflow extension to manage instances (create, get, dispose).\n *\n * @function\n * @export\n * @return {function(*, {Workflow: *, Tinyflow: *, TinyflowError: *}): function(): void}\n */\nexport const withInstances = (/* config */) => (internal, { Workflow, Tinyflow, TinyflowError }) => {\n  internal.instances = new Map()\n  const { instances, listeners } = internal\n\n  /**\n   * Gets a workflow instance by its id\n   * @method\n   * @param id {string}\n   * @returns {Workflow}\n   */\n  Tinyflow.get = id => instances.get(id)\n\n  /**\n   * Returns all non-disposed workflows of any state.\n   * @method\n   * @return {Workflow[]}\n   */\n  Tinyflow.all = () => [...instances.values()]\n\n  /**\n   * Clears all instances. By default, all engines are shut down\n   * and fire the end event.\n   * @method\n   */\n  Tinyflow.clear = () => {\n    const ids = [...instances.keys()]\n    for (const instanceId of ids) {\n      const workflow = Tinyflow.get(instanceId)\n      workflow.cancel()\n      Tinyflow.dispose(instanceId)\n    }\n  }\n\n  /**\n   * Creates a new workflow instance by given workflow definitions.\n   *\n   * @param definition {object} the workflow definitions object\n   * @returns {Workflow}\n   */\n  Tinyflow.create = (definition) => {\n    const workflow = new Workflow(definition)\n    instances.set(workflow.id, workflow)\n    return workflow\n  }\n\n  /**\n   * Fully disposes a workflow, including any event listener\n   * to it, or its current step.\n   * Once complete it will finally remove the workflow from\n   * the internal instances list.\n   * @param instanceId {string}\n   * @param force {boolean=}\n   */\n  Tinyflow.dispose = (instanceId, { force = false } = {}) => {\n    const workflow = instances.get(instanceId)\n    if (!workflow) {\n      throw new TinyflowError(`Workflow does not exist by id ${instanceId}`)\n    }\n    if (!force && workflow.state === 'active') {\n      throw new TinyflowError(`Cannot dispose active workflow \"${workflow.name}\"`, { instanceId })\n    }\n    if (workflow.current) {\n      workflow.current.off()\n      workflow.current = null\n    }\n    workflow.off()\n    listeners.delete(workflow)\n    instances.delete(instanceId)\n  }\n\n  // dispose method for complete cleanup of this extension\n  return () => {\n    delete internal.instances\n    delete Tinyflow.get\n    delete Tinyflow.all\n    delete Tinyflow.clear\n    delete Tinyflow.create\n    delete Tinyflow.dispose\n  }\n}\n"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","Array","isArray","_arrayLikeToArray","iter","Symbol","iterator","from","_iterableToArray","_unsupportedIterableToArray","TypeError","_nonIterableSpread","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","len","length","i","arr2","exports","withInstances","internal","_ref","Workflow","Tinyflow","TinyflowError","instances","Map","listeners","get","id","all","values","clear","_step","_iterator","allowArrayLike","it","F","s","done","value","e","_e","f","normalCompletion","err","didErr","step","next","_e2","_createForOfIteratorHelper","keys","instanceId","cancel","dispose","create","definition","workflow","set","_ref2$force","arguments","undefined","force","concat","state","current","off"],"mappings":"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"}