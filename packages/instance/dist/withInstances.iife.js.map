{"version":3,"file":"withInstances.iife.js","sources":["../withInstances.cjs"],"sourcesContent":["/**\n * @namespace Tinyflow\n */\n\n/**\n * Tinyflow extension to manage instances (create, get, dispose).\n *\n * @function\n * @export\n * @return {function(*, {Workflow: *, Tinyflow: *, TinyflowError: *}): function(): void}\n */\nmodule.exports.withInstances = (/* config */) => (internal, { Workflow, Tinyflow, TinyflowError }) => {\n  internal.instances = new Map()\n  const { instances, listeners } = internal\n\n  /**\n   * Gets a workflow instance by its id\n   * @method\n   * @param id {string}\n   * @returns {Workflow}\n   */\n  Tinyflow.get = id => instances.get(id)\n\n  /**\n   * Returns all non-disposed workflows of any state.\n   * @method\n   * @return {Workflow[]}\n   */\n  Tinyflow.all = () => [...instances.values()]\n\n  /**\n   * Clears all instances. By default, all engines are shut down\n   * and fire the end event.\n   * @method\n   */\n  Tinyflow.clear = () => {\n    const ids = [...instances.keys()]\n    for (const instanceId of ids) {\n      const workflow = Tinyflow.get(instanceId)\n      workflow.cancel()\n      Tinyflow.dispose(instanceId)\n    }\n  }\n\n  /**\n   * Creates a new workflow instance by given workflow definitions.\n   *\n   * @param definition {object} the workflow definitions object\n   * @returns {Workflow}\n   */\n  Tinyflow.create = (definition) => {\n    const workflow = new Workflow(definition)\n    instances.set(workflow.id, workflow)\n    return workflow\n  }\n\n  /**\n   * Fully disposes a workflow, including any event listener\n   * to it, or its current step.\n   * Once complete it will finally remove the workflow from\n   * the internal instances list.\n   * @param instanceId {string}\n   * @param force {boolean=}\n   */\n  Tinyflow.dispose = (instanceId, { force = false } = {}) => {\n    const workflow = instances.get(instanceId)\n    if (!workflow) {\n      throw new TinyflowError(`Workflow does not exist by id ${instanceId}`)\n    }\n    if (!force && workflow.state === 'active') {\n      throw new TinyflowError(`Cannot dispose active workflow \"${workflow.name}\"`, { instanceId })\n    }\n    if (workflow.current) {\n      workflow.current.off()\n      workflow.current = null\n    }\n    workflow.off()\n    listeners.delete(workflow)\n    instances.delete(instanceId)\n  }\n\n  // dispose method for complete cleanup of this extension\n  return () => {\n    delete internal.instances\n    delete Tinyflow.get\n    delete Tinyflow.all\n    delete Tinyflow.clear\n    delete Tinyflow.create\n    delete Tinyflow.dispose\n  }\n}\n"],"names":["withInstances_1","withInstances","internal","_ref","Workflow","Tinyflow","TinyflowError","instances","Map","listeners","get","id","all","_toConsumableArray","values","clear","ids","keys","_iterator","_createForOfIteratorHelper","_step","s","n","done","instanceId","value","workflow","cancel","dispose","err","e","f","create","definition","set","_ref2","arguments","length","undefined","_ref2$force","force","concat","state","name","current","off"],"mappings":"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"}