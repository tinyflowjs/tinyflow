{"version":3,"file":"Tinyflow.cjs.js","sources":["../Tinyflow.js"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nexport const Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   * @private\n   * @type {Map<string, function>}\n   */\n  extensions: new Map(),\n\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, Map<string, function[]>>}\n   */\n  listeners: new WeakMap(),\n\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n\n  /**\n   * Generates a history entry.\n   * @private\n   * @param step {Step}\n   * @param workflow {Workflow}\n   * @return {{at: Date, data, name}}\n   */\n  history: (step /* workflow */) => ({ name: step.name, data: { ...step.data }, at: new Date() })\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_, { Tinyflow, TinyflowError, Workflow, Step, Emitter })\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((resolve, reject) => {\n  try {\n    resolve(fn(...args))\n  } catch (e) {\n    reject(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    const list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a listener exactly once and then removes it\n   * @param name {string}\n   * @param fn {function}\n   */\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    const list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    const index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n    .keys(target.custom)\n    .filter(key => extensions.has(key))\n    .map(name => {\n      const fn = extensions.get(name)\n      const value = target.custom[name]\n      return fn(value, { workflow, step })\n    }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n */\nexport class Workflow extends Emitter {\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start active workflow',\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using {Step.prototype.complete} or {Step.prototype.cancel}!\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push(_.history(step, workflow))\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'cancelled'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nexport class Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start a step in active state',\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only update in an active state, got \"${this.state}\"`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n"],"names":["_excluded","_excluded2","_typeof","o","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","r","l","t","e","n","u","a","f","call","next","Object","done","push","value","length","Array","isArray","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","self","_assertThisInitialized","ReferenceError","_inherits","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf","_wrapNativeSuper","Class","_cache","Map","undefined","_isNativeFunction","has","get","set","Wrapper","_construct","arguments","enumerable","p","bind","Boolean","valueOf","fn","Function","toString","setPrototypeOf","__proto__","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","slice","name","from","test","iter","len","arr2","ownKeys","filter","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","_toPrimitive","String","toPrimitive","Number","Tinyflow","_","extensions","listeners","WeakMap","id","Math","random","substring","history","step","data","at","Date","by","emitter","extend","TinyflowError","Workflow","Step","Emitter","use","handler","tick","setTimeout","promisify","args","Promise","resolve","reject","on","list","once","off","clear","index","findIndex","splice","concat","emit","_this","reverse","_loop","error","_Error","message","details","_this2","Error","runExtensions","_ref","workflow","onSuccess","onError","all","custom","map","then","_Emitter","_ref2","_this3","_ref2$steps","steps","state","stepExt","entries","_ref3","_ref4","val","_ref5","_ref6","scope","includes","_ref7","array","_ref8","current","start","_this4","_ref9","autoStep","indexOrName","_this5","_ref10","stepId","autoOnEnd","stepDef","find","_ref11","workflowId","endStep","complete","cancel","_Emitter2","_ref12","_this6","_ref12$data","_this7","wf","update","assign"],"mappings":"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"}