{"version":3,"file":"Tinyflow.cjs.min.js","sources":["../Tinyflow.js"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nexport const Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   * @private\n   * @type {Map<string, function>}\n   */\n  extensions: new Map(),\n\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, Map<string, function[]>>}\n   */\n  listeners: new WeakMap(),\n\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n\n  /**\n   * Generates a history entry.\n   * @private\n   * @param step {Step}\n   * @param workflow {Workflow}\n   * @return {{at: Date, data, name}}\n   */\n  history: (step, /* workflow */) => ({ name: step.name, data: { ...step.data }, at: new Date() })\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_, { Tinyflow, TinyflowError, Workflow, Step, Emitter })\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((res, rej) => {\n  try {\n    res(fn(...args))\n  } catch (e) {\n    rej(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    let list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a listener exactly once and then removes it\n   * @param name {string}\n   * @param fn {function}\n   */\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    let list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    let index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    }\n    else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n      .keys(target.custom)\n      .filter(key => extensions.has(key))\n      .map(name => {\n        const fn = extensions.get(name)\n        const value = target.custom[name]\n        return fn(value, { workflow, step })\n      }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n */\nexport class Workflow extends Emitter {\n\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start active workflow`,\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using {Step.prototype.complete} or {Step.prototype.cancel}!\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    let stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push(_.history(step, workflow))\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'cancelled'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nexport class Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start a step in active state`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only update in an active state, got \"${this.state}\"`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n"],"names":["_excluded","_excluded2","_typeof","o","Symbol","iterator","constructor","prototype","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","r","l","t","e","n","u","a","f","call","next","Object","done","push","value","length","_iterableToArrayLimit","_unsupportedIterableToArray","TypeError","_nonIterableRest","_objectWithoutProperties","source","excluded","key","target","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_callSuper","_getPrototypeOf","self","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","_inherits","subClass","superClass","create","writable","configurable","defineProperty","_setPrototypeOf","_wrapNativeSuper","Class","_cache","Map","undefined","_isNativeFunction","fn","Function","toString","has","get","set","Wrapper","_construct","arguments","p","bind","enumerable","Boolean","valueOf","setPrototypeOf","__proto__","getPrototypeOf","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_toPropertyKey","_createClass","protoProps","staticProps","_toConsumableArray","_arrayWithoutHoles","_arrayLikeToArray","iter","from","_iterableToArray","_nonIterableSpread","minLen","slice","name","test","len","arr2","ownKeys","filter","getOwnPropertyDescriptor","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","toPrimitive","String","Number","_toPrimitive","Tinyflow","_","extensions","listeners","WeakMap","id","Math","random","substring","history","step","data","at","Date","by","emitter","extend","TinyflowError","Workflow","Step","Emitter","use","handler","tick","setTimeout","list","this","once","on","index","findIndex","concat","splice","clear","_this","reverse","_loop","args","Promise","res","rej","emit","error","_Error","message","details","_this2","Error","runExtensions","_ref","workflow","onSuccess","onError","all","custom","map","then","_Emitter","_ref2","_this3","_ref2$steps","steps","state","stepExt","entries","_ref3","_ref4","val","_ref6","scope","includes","_ref7","array","_ref8","current","_this4","autoStep","indexOrName","_this5","_ref10","stepId","autoOnEnd","stepDef","find","_ref11","workflowId","endStep","off","complete","start","_Emitter2","_ref12","_this6","_ref12$data","_this7","wf","assign","exports"],"mappings":"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"}