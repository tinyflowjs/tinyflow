{"version":3,"file":"Tinyflow.iife.min.js","sources":["../Tinyflow.cjs"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nconst Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   * @private\n   * @type {Map<string, function>}\n   */\n  extensions: new Map(),\n\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, Map<string, function[]>>}\n   */\n  listeners: new WeakMap(),\n\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n\n  /**\n   * Generates a history entry.\n   * @private\n   * @param step {Step}\n   * @param workflow {Workflow}\n   * @return {{at: Date, data, name}}\n   */\n  history: (step /* workflow */) => ({ name: step.name, data: { ...step.data }, at: new Date() })\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_, { Tinyflow, TinyflowError, Workflow, Step, Emitter })\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((resolve, reject) => {\n  try {\n    resolve(fn(...args))\n  } catch (e) {\n    reject(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    const list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a listener exactly once and then removes it\n   * @param name {string}\n   * @param fn {function}\n   */\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    const list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    const index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n    .keys(target.custom)\n    .filter(key => extensions.has(key))\n    .map(name => {\n      const fn = extensions.get(name)\n      const value = target.custom[name]\n      return fn(value, { workflow, step })\n    }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n */\nclass Workflow extends Emitter {\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start active workflow',\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using {Step.prototype.complete} or {Step.prototype.cancel}!\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push(_.history(step, workflow))\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'cancelled'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nclass Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start a step in active state',\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only update in an active state, got \"${this.state}\"`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n\nmodule.exports.Tinyflow = Tinyflow\nmodule.exports.Workflow = Workflow\nmodule.exports.Step = Step\n"],"names":["Tinyflow","_","extensions","Map","listeners","WeakMap","id","Math","random","toString","substring","history","step","name","data","_objectSpread","at","Date","by","emitter","has","set","get","extend","fn","TinyflowError","Workflow","Step","Emitter","use","handler","call","tick","setTimeout","arguments","length","undefined","_classCallCheck","_createClass","key","value","list","this","push","once","on","index","findIndex","f","concat","splice","clear","_this","reverse","_loop","i","args","Promise","resolve","reject","apply","_toConsumableArray","e","emit","error","source","_Error","message","details","_this2","_callSuper","_inherits","_wrapNativeSuper","Error","runExtensions","_ref","workflow","onSuccess","onError","target","all","Object","keys","custom","filter","map","then","_Emitter","_ref2","_this3","_ref2$steps","steps","_objectWithoutProperties","_excluded","state","stepExt","entries","forEach","_ref3","_ref4","_slicedToArray","val","_ref6","Array","isArray","scope","includes","_ref7","array","_ref8","next","current","_this4","autoStep","create","indexOrName","_this5","_ref10","stepId","autoOnEnd","stepDef","find","_ref11","workflowId","endStep","off","complete","start","_Emitter2","_ref12","_this6","_ref12$data","_excluded2","_this7","wf","assign","Tinyflow_2","Tinyflow_1","Workflow_1","Step_1"],"mappings":"y9JAOMA,EAAW,CAAA,EAKXC,EAAI,CAMRC,WAAY,IAAIC,IAShBC,UAAW,IAAIC,QAMfC,GAAI,WAAA,OAAMC,KAAKC,SAASC,SAAS,IAAIC,UAAU,EAAG,GAAG,EASrDC,QAAS,SAACC,GAAI,MAAqB,CAAEC,KAAMD,EAAKC,KAAMC,KAAIC,EAAA,GAAOH,EAAKE,MAAQE,GAAI,IAAIC,KAAQ,GAKxFf,EAA0BD,EAA1BC,WAAYE,EAAcH,EAAdG,UAWpBA,EAAUc,GAAK,SAACC,EAASN,GAIvB,OAHKT,EAAUgB,IAAID,IACjBf,EAAUiB,IAAIF,EAAS,IAAIhB,KAEtBC,EAAUkB,IAAIH,GAASG,IAAIT,IAAS,EAC7C,EAUAb,EAASuB,OAAS,SAAAC,GAAE,OAAIA,EAAGvB,EAAG,CAAED,SAAAA,EAAUyB,cAAAA,EAAeC,SAAAA,EAAUC,KAAAA,EAAMC,QAAAA,GAAU,EAgBnF5B,EAAS6B,IAAM,SAAChB,EAAMiB,IACG,OAAZA,EAAmB5B,EAAiB,OAAGA,EAAWmB,KAC1DU,KAAK7B,EAAYW,EAAMiB,EAC5B,EAKA,IAAME,EAAO,SAACR,GAAS,OAAKS,WAAWT,EAApBU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAuB,EAavCN,EAAO,WAAA,SAAAA,IAAAS,OAAAT,EAAA,CA6EV,OA7EUU,EAAAV,EAAA,CAAA,CAAAW,IAAA,KAAAC,MAMX,SAAI3B,EAAMW,GACR,IAAMiB,EAAOrC,EAAUc,GAAGwB,KAAM7B,GAChC4B,EAAKE,KAAKnB,GACVpB,EAAUkB,IAAIoB,MAAMrB,IAAIR,EAAM4B,EAC/B,GAEH,CAAAF,IAAA,OAAAC,MAKE,SAAM3B,EAAMW,GACVA,EAAGoB,MAAO,EACVF,KAAKG,GAAGhC,EAAMW,EACf,GAEH,CAAAe,IAAA,MAAAC,MASE,SAAK3B,EAAMW,GACT,GAAKX,EAAL,CAIA,IAAM4B,EAAOrC,EAAUc,GAAGwB,KAAM7B,GAC3BW,IACHiB,EAAKN,OAAS,GAEhB,IAAMW,EAAQL,EAAKN,OAAS,GAAKM,EAAKM,WAAU,SAACC,GAAC,OAAKA,IAAMxB,KAC7D,KAAIsB,GAAS,GAGX,MAAM,IAAIrB,EAAa,2CAAAwB,OAA4CpC,GAAQ,CACzEP,GAAIoC,KAAKpC,GACTO,KAAM6B,KAAK7B,OAJb4B,EAAKS,OAAOJ,EAAO,GAOrB1C,EAAUkB,IAAIoB,MAAMrB,IAAIR,EAAM4B,EAd7B,MAFCrC,EAAUkB,IAAIoB,MAAMS,OAiBvB,GAEH,CAAAZ,IAAA,OAAAC,MAYE,SAAM3B,EAAMC,GAEV,IAFgB,IAAAsC,EAAAV,KACVD,EAAOrC,EAAUc,GAAGwB,KAAM7B,GAAMwC,UAASC,EAAAA,WAE7C,IAAMN,EAAIP,EAAKc,GACfvB,GAAK,WAhFO,IAACR,EAAIgC,GAAJhC,EAiFDwB,EAjFKQ,EAiFF,CAAC1C,GAjFU,IAAI2C,SAAQ,SAACC,EAASC,GACpD,IACED,EAAQlC,EAAEoC,aAAAC,EAAIL,IACf,CAAC,MAAOM,GACPH,EAAOG,EACR,CACH,KA2E4B,OACX,SAAAA,GAAC,OAAIV,EAAKW,KAAK,QAAS,CAAEC,MAAOF,EAAGG,OAAQb,MAC7D,IACUJ,EAAEJ,MACJH,EAAKS,OAAOK,EAAG,IAPVA,EAAId,EAAKN,OAAS,EAAGoB,GAAK,EAAGA,IAAGD,IAUzClD,EAAUkB,IAAIoB,MAAMrB,IAAIR,EAAM4B,EAC/B,KAAAb,CAAA,CA7EU,GAqFPH,WAAayC,GACjB,SAAAzC,EAAa0C,EAASC,GAAS,IAAAC,EAGP,OAHOhC,OAAAZ,IAC7B4C,EAAAC,EAAA7C,KAAAA,GAAM0C,KACDtD,KAAO,gBACZwD,EAAKD,QAAUA,EAAOC,CACvB,CAAA,OALgBE,EAAA9C,EAAAyC,GAKhB5B,EAAAb,EAAA,EAAA+C,EALyBC,QAQtBC,EAAgB,SAAHC,GAA+C,IAAzCC,EAAQD,EAARC,SAAUhE,EAAI+D,EAAJ/D,KAAMiE,EAASF,EAATE,UAAWC,EAAOH,EAAPG,QAC5CC,EAASH,GAAYhE,EAC3B6C,QAAQuB,IAAIC,OACTC,KAAKH,EAAOI,QACZC,QAAO,SAAA7C,GAAG,OAAIrC,EAAWkB,IAAImB,EAAI,IACjC8C,KAAI,SAAAxE,GAGH,OAFWX,EAAWoB,IAAIT,EAEnBW,CADOuD,EAAOI,OAAOtE,GACX,CAAE+D,SAAAA,EAAUhE,KAAAA,QAE9B0E,KAAKT,GAAU,MACTC,EACX,EAiBMpD,WAAQ6D,GAcZ,SAAA7D,EAAA8D,GAAkD,IAAAC,EAAnC5E,EAAI2E,EAAJ3E,KAAMP,EAAEkF,EAAFlF,GAAEoF,EAAAF,EAAEG,MAAAA,OAAK,IAAAD,EAAG,CAAE,EAAAA,EAAKP,EAAMS,EAAAJ,EAAAK,GAAAxD,OAAAX,IAC5C+D,EAAAnB,EAAA5B,KAAAhB,IACKb,KAAOA,EACZ4E,EAAKnF,GAAKA,GAAML,EAAEK,KAClBmF,EAAK3E,KAAO,KACZ2E,EAAKK,MAAQ,UACbL,EAAKN,OAAS,GACdM,EAAK9E,QAAU,GAGf,IAAMoF,EAAU,CAAA,EA4BhB,GA3BAd,OAAOe,QAAQb,GAAQc,SAAQ,SAAAC,GAAgB,IAAAC,EAAAC,EAAAF,EAAA,GAAd3D,EAAG4D,EAAA,GAAEE,EAAGF,EAAA,GAGoBG,EAAAF,EAAvCG,MAAMC,QAAQH,GAAOA,EAAM,CAACA,EAAK,OAAM,GAApD7E,EAAE8E,EAAA,GAAEG,EAAKH,EAAA,GAGZ,CAAC,MAAO,YAAYI,SAASD,KAC/BhB,EAAKN,OAAO5C,GAAOf,GAMjB,CAAC,MAAO,SAASkF,SAASD,KAC5BV,EAAQxD,GAAOf,EAEvB,IAEIiE,EAAKE,MAAQV,OACVe,QAAQL,GACRN,KAAI,SAAAsB,EAAgB7D,EAAO8D,GAAU,IAAAC,EAAAT,EAAAO,EAAA,GAA/B9F,EAAIgG,EAAA,GAAErE,EAAKqE,EAAA,GAIhB,OAAA9F,EAAAA,EAAA,CAAS+F,KAHIhE,EAAQ8D,EAAMzE,OAAS,EAChCW,EAAQ,EACR,KACWjC,KAAAA,GAASkF,GAAYvD,EAC5C,IAE8B,IAAtBiD,EAAKE,MAAMxD,OACb,MAAM,IAAIV,EACR,qDACA,CAAEZ,KAAAA,EAAMP,GAAAA,IAQO,OAAnBmF,EAAKsB,QAAU,KAAItB,CACpB,CAsIA,OAtMWlB,EAAA7C,EAAA6D,GAkEdjD,EAAAZ,EAAA,CAAA,CAAAa,IAAA,QAAAC,MASE,WAA0B,IAAAwE,EAAAtE,KAAjBuE,GAAiB/E,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,CAAE,GAAf+E,SACP,GAAmB,WAAfvE,KAAKoD,MACP,MAAM,IAAIrE,EACR,+BACA,CAAEZ,KAAM6B,KAAK7B,KAAMP,GAAIoC,KAAKpC,KAGhCoC,KAAK5B,KAAOmE,OAAOiC,OAAO,MAC1B,IAAMtC,EAAWlC,KAEjBgC,EAAc,CACZE,SAAAA,EACAC,UAAW,WACTmC,EAAKlB,MAAQ,SACbkB,EAAKjD,KAAK,UAAWiD,IACJ,IAAbC,GACFD,EAAKpG,KAAK,EAEb,EACDkE,QAAS,SAAAhB,GAAC,OAAIkD,EAAKjD,KAAK,QAAS,CAAEC,MAAOF,EAAGc,SAAAA,GAAW,GAE3D,GAEH,CAAArC,IAAA,OAAAC,MAoBE,SAAM2E,GAAyC,IAAAC,EAAA1E,KAAA2E,EAAAnF,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,CAAE,EAAxBoF,EAAMD,EAANC,OAAQC,EAASF,EAATE,UAC3B,GAAmB,WAAf7E,KAAKoD,MACP,MAAM,IAAIrE,EAAawB,0CAAAA,OACqBP,KAAKoD,MAC/C,KAAA,CAAEqB,YAAAA,EAAatG,KAAM6B,KAAK7B,KAAMP,GAAIoC,KAAKpC,KAI7C,IAAMkH,EAAiC,iBAAhBL,EACnBzE,KAAKiD,MAAMwB,GACXzE,KAAKiD,MAAM8B,MAAK,SAAAC,GAAO,OAAAA,EAAJ7G,OAAoBsG,KAE3C,IAAKK,EACH,MAAM,IAAI/F,EAAa,iCAAAwB,OACYuE,GACjC,CAAEL,YAAAA,EAAatG,KAAM6B,KAAK7B,KAAMP,GAAIoC,KAAKpC,KAI7C,IAAMA,EAAKgH,GAAUrH,EAAEK,KACjBqH,EAAajF,KAAKpC,GAClBM,EAAO,IAAIe,EAAIZ,EAAA,CAAGT,GAAAA,EAAIqH,WAAAA,GAAeH,IACrC5C,EAAWlC,KACXkF,EAAU,SAAChH,GAQf,OAPIA,IACFA,EAAKiH,MAILT,EAAKzG,QAAQgC,KAAK1C,EAAEU,QAAQC,EAAMgE,MAE7B,IAGS,IAAd2C,GACF3G,EAAKgC,KAAK,OAAO,SAAChC,GAChBgE,EAAS9D,KAAKF,EAAKC,MAAKE,EAAA,CAAA,EAAQH,EAAKE,MAErC,IAAMgG,EAAOlG,EAAKkG,KAClB,OAAiB,OAATA,GAAiBA,GAAQlC,EAASe,MAAMxD,OAAS,EACrDH,GAAK,WAAA,OAAM4C,EAAShE,KAAKkG,EAAM,IAC/Bc,EAAQhH,IAASgE,EAASkD,UACtC,IAGIlH,EAAKmH,QACLH,EAAQlF,KAAKqE,SACbrE,KAAKqE,QAAUnG,EACf8B,KAAKqB,KAAK,OAAQrB,KACnB,GAEH,CAAAH,IAAA,WAAAC,MAME,WACME,KAAKqE,SACPrE,KAAKqE,QAAQc,MAEfnF,KAAKqE,QAAU,KACfrE,KAAKoD,MAAQ,WACbpD,KAAKqB,KAAK,MAAOrB,KAClB,GAEH,CAAAH,IAAA,SAAAC,MAME,WACME,KAAKqE,SACPrE,KAAKqE,QAAQc,MAEfnF,KAAK5B,KAAO,KACZ4B,KAAKqE,QAAU,KACfrE,KAAKoD,MAAQ,YACbpD,KAAKqB,KAAK,MAAOrB,KAClB,KAAAhB,CAAA,EAtMoBE,GAmNjBD,WAAIqG,GAWR,SAAArG,EAAAsG,GAAqE,IAAAC,EAAtD5H,EAAE2H,EAAF3H,GAAIqH,EAAUM,EAAVN,WAAY9G,EAAIoH,EAAJpH,KAAIsH,EAAAF,EAAEnH,KAAAA,OAAO,IAAHqH,EAAG,KAAIA,EAAErB,EAAImB,EAAJnB,KAAS3B,EAAMS,EAAAqC,EAAAG,GAQ/C,OAR+C/F,OAAAV,IAC/DuG,EAAA5D,EAAA5B,KAAAf,IACKrB,GAAKA,GAAML,EAAEK,KAClB4H,EAAKP,WAAaA,EAClBO,EAAKrH,KAAOA,EACZqH,EAAKpB,KAAOA,EACZoB,EAAK/C,OAASA,EACd+C,EAAKpC,MAAQ,UACboC,EAAKpH,KAAOA,EAAIoH,CACjB,CA2EA,OA/FO3D,EAAA5C,EAAAqG,GAsBV1F,EAAAX,EAAA,CAAA,CAAAY,IAAA,QAAAC,MAcE,WAAS,IAAA6F,EAAA3F,KACP,GAAmB,WAAfA,KAAKoD,MACP,MAAM,IAAIrE,EACR,sCACA,CAAEZ,KAAM6B,KAAK7B,KAAMP,GAAIoC,KAAKpC,GAAIgI,GAAI5F,KAAKiF,aAI7CjF,KAAK5B,KAAO4B,KAAK5B,MAAQmE,OAAOiC,OAAO,MACvC,IAAMtG,EAAO8B,KAEbgC,EAAc,CACZ9D,KAAAA,EACAiE,UAAW,WACTwD,EAAKvC,MAAQ,SACbuC,EAAKtE,KAAK,UAAWsE,EACtB,EACDvD,QAAS,SAAAhB,GAAC,OAAIuE,EAAKtE,KAAK,QAAS,CAAEC,MAAOF,EAAGlD,KAAAA,GAAO,GAEvD,GAEH,CAAA2B,IAAA,SAAAC,MASE,SAAQ1B,GACN,GAAmB,WAAf4B,KAAKoD,MACP,MAAM,IAAIrE,EAAawB,4CAAAA,OACuBP,KAAKoD,MACjD,KAAA,CAAEjF,KAAM6B,KAAK7B,KAAMP,GAAIoC,KAAKpC,GAAIgI,GAAI5F,KAAKiF,aAG7CjF,KAAK5B,KAAOmE,OAAOiC,OAAO,MAC1BjC,OAAOsD,OAAO7F,KAAK5B,KAAMA,GACzB4B,KAAKqB,KAAK,SAAUrB,KACrB,GAEH,CAAAH,IAAA,WAAAC,MAIE,WACEE,KAAKoD,MAAQ,WACbpD,KAAKqB,KAAK,MAAOrB,KAClB,GAEH,CAAAH,IAAA,SAAAC,MAIE,WACEE,KAAKoD,MAAQ,YACbpD,KAAK5B,KAAO,KACZ4B,KAAKqB,KAAK,MAAOrB,KAClB,KAAAf,CAAA,EA/FgBC,GAkGnB4G,EAAAC,EAAAzI,SAA0BA,EAC1B0I,EAAAD,EAAA/G,SAA0BA,EAC1BiH,EAAAF,EAAA9G,KAAsBA,EAAAA,OAAAA,EAAAA,KAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,SAAAA,EAAAA,EAAAA,QAAAA,EAAAA,OAAAA,eAAAA,EAAAA,aAAAA,CAAAA,OAAAA,IAAAA,CAAAA,EAAAA,CAAAA"}