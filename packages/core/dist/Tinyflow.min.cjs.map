{"version":3,"file":"Tinyflow.min.cjs","sources":["../Tinyflow.cjs"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nconst Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   * @private\n   * @type {Map<string, function>}\n   */\n  extensions: new Map(),\n\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, Map<string, function[]>>}\n   */\n  listeners: new WeakMap(),\n\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n\n  /**\n   * Generates a history entry.\n   * @private\n   * @param step {Step}\n   * @param workflow {Workflow}\n   * @return {{at: Date, data, name}}\n   */\n  history: (step /* workflow */) => ({ name: step.name, data: { ...step.data }, at: new Date() })\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_, { Tinyflow, TinyflowError, Workflow, Step, Emitter })\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((resolve, reject) => {\n  try {\n    resolve(fn(...args))\n  } catch (e) {\n    reject(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    const list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a listener exactly once and then removes it\n   * @param name {string}\n   * @param fn {function}\n   */\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    const list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    const index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n    .keys(target.custom)\n    .filter(key => extensions.has(key))\n    .map(name => {\n      const fn = extensions.get(name)\n      const value = target.custom[name]\n      return fn(value, { workflow, step })\n    }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n */\nclass Workflow extends Emitter {\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start active workflow',\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using {Step.prototype.complete} or {Step.prototype.cancel}!\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push(_.history(step, workflow))\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'cancelled'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nclass Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start a step in active state',\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only update in an active state, got \"${this.state}\"`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n\nmodule.exports.Tinyflow = Tinyflow\nmodule.exports.Workflow = Workflow\nmodule.exports.Step = Step\n"],"names":["Tinyflow","_","extensions","Map","listeners","WeakMap","id","Math","random","toString","substring","history","step","name","data","at","Date","by","emitter","has","set","get","extend","fn","TinyflowError","Workflow","Step","Emitter","use","handler","delete","call","tick","t","setTimeout","on","list","this","push","once","off","clear","length","index","findIndex","f","splice","emit","reverse","i","args","Promise","resolve","reject","e","catch","error","source","Error","constructor","message","details","super","runExtensions","workflow","onSuccess","onError","target","all","Object","keys","custom","filter","key","map","then","steps","state","stepExt","entries","forEach","val","scope","Array","isArray","includes","value","array","next","current","start","autoStep","create","indexOrName","stepId","autoOnEnd","stepDef","find","workflowId","endStep","complete","cancel","wf","update","assign","module","exports"],"mappings":"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"}