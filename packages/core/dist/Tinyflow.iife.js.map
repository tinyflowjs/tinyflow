{"version":3,"file":"Tinyflow.iife.js","sources":["../Tinyflow.js"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nexport const Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   * @private\n   * @type {Map<string, function>}\n   */\n  extensions: new Map(),\n\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, Map<string, function[]>>}\n   */\n  listeners: new WeakMap(),\n\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n\n  /**\n   * Generates a history entry.\n   * @private\n   * @param step {Step}\n   * @param workflow {Workflow}\n   * @return {{at: Date, data, name}}\n   */\n  history: (step, /* workflow */) => ({ name: step.name, data: { ...step.data }, at: new Date() })\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_, { Tinyflow, TinyflowError, Workflow, Step, Emitter })\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((res, rej) => {\n  try {\n    res(fn(...args))\n  } catch (e) {\n    rej(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    let list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a listener exactly once and then removes it\n   * @param name {string}\n   * @param fn {function}\n   */\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    let list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    let index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    }\n    else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n      .keys(target.custom)\n      .filter(key => extensions.has(key))\n      .map(name => {\n        const fn = extensions.get(name)\n        const value = target.custom[name]\n        return fn(value, { workflow, step })\n      }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n */\nexport class Workflow extends Emitter {\n\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start active workflow`,\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using {Step.prototype.complete} or {Step.prototype.cancel}!\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    let stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push(_.history(step, workflow))\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'cancelled'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nexport class Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        `Cannot start a step in active state`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only update in an active state, got \"${this.state}\"`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n"],"names":["Tinyflow","_","extensions","Map","listeners","WeakMap","id","Math","random","toString","substring","history","step","name","data","_objectSpread","at","Date","by","emitter","has","set","get","extend","fn","TinyflowError","Workflow","Step","Emitter","use","handler","call","tick","t","arguments","length","undefined","setTimeout","promisify","args","Promise","res","rej","apply","_toConsumableArray","e","_classCallCheck","_createClass","key","value","on","list","push","once","off","clear","index","findIndex","f","splice","concat","emit","_this","reverse","_loop","i","error","source","_Error","_inherits","message","details","_this2","_callSuper","_wrapNativeSuper","Error","runExtensions","_ref","workflow","onSuccess","onError","target","all","Object","keys","custom","filter","map","then","_Emitter","_ref2","_this3","_ref2$steps","steps","_objectWithoutProperties","_excluded","state","stepExt","entries","forEach","_ref3","_ref4","_slicedToArray","val","_ref5","Array","isArray","_ref6","scope","includes","_ref7","array","_ref8","next","current","start","_this4","_ref9","autoStep","create","indexOrName","_this5","_ref10","stepId","autoOnEnd","stepDef","find","_ref11","workflowId","endStep","complete","cancel","_Emitter2","_ref12","_this6","_ref12$data","_excluded2","_this7","wf","update","assign"],"mappings":"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"}