{"version":3,"file":"Tinyflow.es5.js","sources":["../Tinyflow.cjs"],"sourcesContent":["/**\n * Tinyflow is a minimalistic workflow engine with\n * easy customization.\n * You can use it with any JavaScript runtime as it\n * makes no use of any runtime-specifics.\n * @type {object}\n */\nconst Tinyflow = {}\n\n// ----------------------------------------------------------------------------\n// Internal Variables\n// ----------------------------------------------------------------------------\nconst _ = {\n  /**\n   * All registered extensions\n   * @private\n   * @type {Map<string, function>}\n   */\n  extensions: new Map(),\n\n  /**\n   * Listeners are mapped by emitters\n   * in WeakMap in order to have GC remove them,\n   * if the emitter is cleared\n   * @private\n   * @type {WeakMap<object, Map<string, function[]>>}\n   */\n  listeners: new WeakMap(),\n\n  /**\n   * The default id generation. You obviously want to use the {Tinyflow.extend} method to bring your own\n   * @private\n   */\n  id: () => Math.random().toString(16).substring(2, 16),\n\n  /**\n   * Generates a history entry.\n   * @private\n   * @param step {Step}\n   * @param workflow {Workflow}\n   * @return {{at: Date, data, name}}\n   */\n  history: (step /* workflow */) => ({ name: step.name, data: { ...step.data }, at: new Date() })\n}\n\n// make available as local variables\n// without the need for the _. prefix\nconst { extensions, listeners } = _\n\n/**\n * Get the listeners for a given emitter.\n * Always returns an array.\n *\n * @private\n * @param emitter {Emitter}\n * @param name {string }\n * @returns {function[]}\n */\nlisteners.by = (emitter, name) => {\n  if (!listeners.has(emitter)) {\n    listeners.set(emitter, new Map())\n  }\n  return listeners.get(emitter).get(name) || []\n}\n\n// ----------------------------------------------------------------------------\n// Public API\n// ----------------------------------------------------------------------------\n/**\n * Extend Tinyflow functionality. In contrast to register an extension this\n * method allows to extend Tinyflows core functionality.\n * @param fn\n */\nTinyflow.extend = fn => fn(_, { Tinyflow, TinyflowError, Workflow, Step, Emitter })\n\n/**\n * Register an extension by name. Extensions run on workflow-properties that\n * are not part of the engine core.\n * Core properties are currently: id, next, name, prev\n *\n * Extensions can be registered for workflows and/or steps, which can be determined by\n * the second parameter of their callback.\n *\n * Callbacks can also be async, but they're not awaited (only caught).\n * If callback is null then the extension will be removed.\n *\n * @param name {string} name of the property to register an extension\n * @param handler {null|function(property, context):Promise|void} callback to execute\n */\nTinyflow.use = (name, handler) => {\n  const fn = handler === null ? extensions.delete : extensions.set\n  fn.call(extensions, name, handler)\n}\n\n// ----------------------------------------------------------------------------\n// Internal Implementations\n// ----------------------------------------------------------------------------\nconst tick = (fn, t = 0) => setTimeout(fn, t)\nconst promisify = (fn, args) => new Promise((resolve, reject) => {\n  try {\n    resolve(fn(...args))\n  } catch (e) {\n    reject(e)\n  }\n})\n\n/**\n * @class\n * A tiny emitter that provides just the bare minimum.\n */\nclass Emitter {\n  /**\n   * Attach a new listener\n   * @param name {string}\n   * @param fn {function}\n   */\n  on (name, fn) {\n    const list = listeners.by(this, name)\n    list.push(fn)\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a listener exactly once and then removes it\n   * @param name {string}\n   * @param fn {function}\n   */\n  once (name, fn) {\n    fn.once = true\n    this.on(name, fn)\n  }\n\n  /**\n   * Remove listeners. Has multiple combinations:\n   * - if no arg at all is passed will remove **everything**\n   * - if only name is passed will remove all listeners by name\n   * - if name and function is passed will remove only this specific\n   *   listener, if it has been attached before\n   * @param name {string=}\n   * @param fn {function=}\n   */\n  off (name, fn) {\n    if (!name) {\n      listeners.get(this).clear()\n      return // exit\n    }\n    const list = listeners.by(this, name)\n    if (!fn) {\n      list.length = 0\n    }\n    const index = list.length > 0 && list.findIndex((f) => f === fn)\n    if (index > -1) {\n      list.splice(index, 1)\n    } else {\n      throw new TinyflowError(`No listener found by function for event ${name}`, {\n        id: this.id,\n        name: this.name\n      })\n    }\n    listeners.get(this).set(name, list)\n  }\n\n  /**\n   * Fires a new single event for this emitter.\n   * If a listener was registered with the \"once\" flag\n   * then it will only be fired once, then removed\n   * from the listeners list.\n   *\n   * Additional data can be added by an exact single second\n   * argument. Use an object if you have complex data to\n   * submit during the event.\n   * @param name {string} name of the event\n   * @param data {any=} optional data\n   */\n  emit (name, data) {\n    const list = listeners.by(this, name).reverse()\n    for (let i = list.length - 1; i >= 0; i--) {\n      const f = list[i]\n      tick(() => {\n        promisify(f, [data])\n          .catch(e => this.emit('error', { error: e, source: this }))\n      })\n      if (f.once) {\n        list.splice(i, 1)\n      }\n    }\n    listeners.get(this).set(name, list)\n  }\n}\n\n/**\n * A minimal Error extension to add\n * details\n * @class\n */\nclass TinyflowError extends Error {\n  constructor (message, details) {\n    super(message)\n    this.name = 'TinyflowError'\n    this.details = details\n  }\n}\n\nconst runExtensions = ({ workflow, step, onSuccess, onError }) => {\n  const target = workflow || step\n  Promise.all(Object\n    .keys(target.custom)\n    .filter(key => extensions.has(key))\n    .map(name => {\n      const fn = extensions.get(name)\n      const value = target.custom[name]\n      return fn(value, { workflow, step })\n    }))\n    .then(onSuccess)\n    .catch(onError)\n}\n\n/**\n * The main workflow execution class,\n * defined by the given definitions file.\n *\n * Initial state is pending, until `start()` is called.\n * Hooks will not run when pending.\n *\n * Next step is defined either by `next` being defined in the current step\n * or by user explicitly set the name or index of the step.\n * It's up to you to handle permissions for any of these methods.\n *\n * Emits various events, see the respective method documentation.\n *\n * @class\n */\nclass Workflow extends Emitter {\n  /**\n   * Creates a new instance. Any properties in the definitions, hat are not\n   * one of name, id or steps are considered \"custom\" and are (optionally) handled\n   * by their respective extensions (if registered).\n   *\n   * @constructor\n   * @param name {string} name of the workflow\n   * @param id {string} identifier of this instance of the workflow (in case you run multiple of the same)\n   * @param steps {object} the workflows step definitions\n   * @param custom {object} contains all custom properties of this workflow's definitions\n   * @see {Tinyflow.use}\n   * @throws {TinyflowError} if steps are not defined or have length of 0\n   */\n  constructor ({ name, id, steps = {}, ...custom }) {\n    super()\n    this.name = name\n    this.id = id || _.id()\n    this.data = null\n    this.state = 'pending'\n    this.custom = {}\n    this.history = []\n\n    // parse extensions\n    const stepExt = {}\n    Object.entries(custom).forEach(([key, val]) => {\n      // if extensions are not defined as array, we\n      // assume them to run in global scope\n      const [fn, scope] = Array.isArray(val) ? val : [val, 'all']\n\n      // attach extensions for workflows directly\n      if (['all', 'workflow'].includes(scope)) {\n        this.custom[key] = fn\n      }\n      // attach extensions for steps to temp object,\n      // so we can use them in the step parsing\n      // note, that if a step defines the extensions as null\n      // then it will prevent this extension for this step\n      if (['all', 'steps'].includes(scope)) {\n        stepExt[key] = fn\n      }\n    })\n\n    this.steps = Object\n      .entries(steps)\n      .map(([name, value], index, array) => {\n        const next = index < array.length - 1\n          ? index + 1\n          : null\n        return { next, name, ...stepExt, ...value }\n      })\n\n    if (this.steps.length === 0) {\n      throw new TinyflowError(\n        'Workflow steps must have at least one entry, got 0',\n        { name, id }\n      )\n    }\n\n    /**\n     * The current step\n     * @type {Step|null}\n     */\n    this.current = null\n  }\n\n  /**\n   * Starts the workflow, runs through all extensions.\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the workflow start to cancel.\n   * Sets thw workflow state to \"active\"\n   * @emits started - when the workflow instance has successfully started (state became 'active')\n   * @param {autoStep=} if set to false it will not automatically step into the first available step\n   * @throws {TinyflowError} if the state is other than \"pending\"\n   */\n  start ({ autoStep } = {}) {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start active workflow',\n        { name: this.name, id: this.id }\n      )\n    }\n    this.data = Object.create(null)\n    const workflow = this\n\n    runExtensions({\n      workflow,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n        if (autoStep !== false) {\n          this.step(0)\n        }\n      },\n      onError: e => this.emit('error', { error: e, workflow })\n    })\n  }\n\n  /**\n   * Sets a given step by name or index as the new current one.\n   * This method is for manually setting the next step.\n   * If you want the engine to automatically set the next step you\n   * should rather end the current step using {Step.prototype.complete} or {Step.prototype.cancel}!\n   *\n   * When a new step is set, the current step will be disposed properly,\n   * so you don't have to do it.\n   *\n   * Will listen to the new step's \"end\" event and automatically\n   * determine the next step to choose or to end the workflow.\n   *\n   * @param indexOrName {string|number|null} index of the step in linear flows or name of the step in non-linear flows\n   * @param options {object=}\n   * @param options.stepId {string=} an optional\n   * @param options.autoOnEnd {boolean=} set to true to prevent workflow from automatically handling the next step\n   *   if the current step ends\n   * @emits step - when the new step is properly set up and active\n   * @throws {TinyflowError} if no step is found by index or name\n   */\n  step (indexOrName, { stepId, autoOnEnd } = {}) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only step in an active state, got \"${this.state}\"`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const stepDef = typeof indexOrName === 'number'\n      ? this.steps[indexOrName]\n      : this.steps.find(({ name }) => name === indexOrName)\n\n    if (!stepDef) {\n      throw new TinyflowError(\n        `Expected step definition, got ${stepDef}`,\n        { indexOrName, name: this.name, id: this.id }\n      )\n    }\n\n    const id = stepId || _.id()\n    const workflowId = this.id\n    const step = new Step({ id, workflowId, ...stepDef })\n    const workflow = this\n    const endStep = (step) => {\n      if (step) {\n        step.off()\n        // for a most simple audit we save a minimal set of data\n        // that allows for reproduction or implementing a \"back to previous\"\n        // procedure, for example using extensions or other externals\n        this.history.push(_.history(step, workflow))\n      }\n      return true\n    }\n\n    if (autoOnEnd !== false) {\n      step.once('end', (step) => {\n        workflow.data[step.name] = { ...step.data }\n\n        const next = step.next\n        return (next !== null && next <= workflow.steps.length - 1)\n          ? tick(() => workflow.step(next))\n          : endStep(step) && workflow.complete()\n      })\n    }\n\n    step.start()\n    endStep(this.current)\n    this.current = step\n    this.emit('step', this)\n  }\n\n  /**\n   * Completes the workflow, sets the current step to null\n   * and the state to \"complete\".\n   * Does not delete the workflow data as opposed to the cancel event\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  complete () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.current = null\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   *\n   *Completes the workflow but also wiped it's data\n   * and sets state as \"cancelled\"\n   * @emits end - the workflow has ended, see the state property for in which state it ended\n   */\n  cancel () {\n    if (this.current) {\n      this.current.off()\n    }\n    this.data = null\n    this.current = null\n    this.state = 'cancelled'\n    this.emit('end', this)\n  }\n}\n\n/**\n * Represents an executable unit of a workflow.\n * Steps work best when they are atomically related to exactly one\n * task. It is up to the user to define and implement what such\n * a task might be.\n * Examples of tasks can be fetching data from an endpoint or\n * users submitting a form.\n * Just make sure a step does not involve multiple tasks.\n * @class\n */\nclass Step extends Emitter {\n  /**\n   * Creates a new step instance\n   * @constructor\n   * @param id {string}\n   * @param workflowId {string}\n   * @param name {string}\n   * @param data {object=} optional data from start of the workflow\n   * @param next {string|number|undefined}\n   * @param custom {...object} all other properties that will be passed on to your custom handlers\n   */\n  constructor ({ id, workflowId, name, data = null, next, ...custom }) {\n    super()\n    this.id = id || _.id()\n    this.workflowId = workflowId\n    this.name = name\n    this.next = next\n    this.custom = custom\n    this.state = 'pending'\n    this.data = data\n  }\n\n  /**\n   * Starts the step, changing its state from 'pending' to active.\n   *\n   * Note: This method is usually called by the workflow automatically. You\n   * should by default not have the need to call this method.\n   *\n   * Runs through all extensions.\n   *\n   * Extensions are caught in a separate Microtask (Promise.catch) and will\n   * not cause the step-start to cancel.\n   *\n   * @emits started - when the step instance has successfully started (state became 'active')\n   * @throws {TinyflowError} if the current state is other than \"pending\"\n   */\n  start () {\n    if (this.state === 'active') {\n      throw new TinyflowError(\n        'Cannot start a step in active state',\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n\n    this.data = this.data || Object.create(null)\n    const step = this\n\n    runExtensions({\n      step,\n      onSuccess: () => {\n        this.state = 'active'\n        this.emit('started', this)\n      },\n      onError: e => this.emit('error', { error: e, step })\n    })\n  }\n\n  /**\n   * Updates the step's data (hard-override!)\n   * Use it's existing data to merge\n   * @example\n   * step.update({ foo: 1 }) // { foo: 1}\n   * step.update({ bar: 2, ...step.data }) // { foo: 1, bar: 2 }\n   * @param data {object}\n   * @emits update - the step's data has updated\n   */\n  update (data) {\n    if (this.state !== 'active') {\n      throw new TinyflowError(\n        `Can only update in an active state, got \"${this.state}\"`,\n        { name: this.name, id: this.id, wf: this.workflowId }\n      )\n    }\n    this.data = Object.create(null)\n    Object.assign(this.data, data)\n    this.emit('update', this)\n  }\n\n  /**\n   * Sets the workflow state to 'complete'\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  complete () {\n    this.state = 'complete'\n    this.emit('end', this)\n  }\n\n  /**\n   * Sets the workflow state to 'cancelled' and wipes the data\n   * @emits end - the workflow has ended, see state for the way it ended\n   */\n  cancel () {\n    this.state = 'cancelled'\n    this.data = null\n    this.emit('end', this)\n  }\n}\n\nmodule.exports.Tinyflow = Tinyflow\nmodule.exports.Workflow = Workflow\nmodule.exports.Step = Step\n"],"names":["Tinyflow","_","extensions","Map","listeners","WeakMap","id","Math","random","toString","substring","history","step","name","data","_objectSpread","at","Date","by","emitter","has","set","get","extend","fn","TinyflowError","Workflow","Step","Emitter","use","handler","call","tick","t","arguments","length","undefined","setTimeout","promisify","args","Promise","resolve","reject","apply","_toConsumableArray","e","_classCallCheck","_createClass","key","value","on","list","push","once","off","clear","index","findIndex","f","splice","concat","emit","_this","reverse","_loop","i","error","source","_Error","_inherits","message","details","_this2","_callSuper","_wrapNativeSuper","Error","runExtensions","_ref","workflow","onSuccess","onError","target","all","Object","keys","custom","filter","map","then","_Emitter","_ref2","_this3","_ref2$steps","steps","_objectWithoutProperties","_excluded","state","stepExt","entries","forEach","_ref3","_ref4","_slicedToArray","val","_ref5","Array","isArray","_ref6","scope","includes","_ref7","array","_ref8","next","current","start","_this4","_ref9","autoStep","create","indexOrName","_this5","_ref10","stepId","autoOnEnd","stepDef","find","_ref11","workflowId","endStep","complete","cancel","_Emitter2","_ref12","_this6","_ref12$data","_excluded2","_this7","wf","update","assign","module","exports"],"mappings":"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"}